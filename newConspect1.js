"use strict";

// Динамическая типизация в JS

console.log(typeof(5 + "")); // конкретинация - сложение строки с чем-то, другим типом данных, на выходе мы получаем строку.

console.log(typeof(+"5")); // унарный плюч динамический типизирует строку с число!

console.log(typeof(parseInt("15px", 10)));// динамическая типизация через методы чисел


let answer = +prompt("Hello", ""); // метод prompt возвращает данные от пользователя в виде строки, но с помощью унарного плюса, мы вернём от него данные в виде числа. Все данные получаемые от пользователя это строки! 


// to boolean

// 0, "", null, undefinde, NaN в логическом контексте эти все значения являются false!Пустая строка будет false именно пустая без пробелов!
// пустые массивы, объекты в логическом контексте это true 

let switcher = null;

if (switcher) {
    console.log("Working");// условие не выполниться так как switcher = false ! 
}

console.log(typeof(!!"5"));// два знака отрицая преобразуют строку в булиновое значение!

// Замыкание и лексическое окружение ======================================================
//  Любая переменная это свойство объекта лексического окружения

function createCounter () {
    let counter = 0;

    const myFunction = function () { // нам нужно запомнить то, что у функции есть доступ к переменным в вызвавшей её области. Формальное название такого феномена — область видимости.
        counter = counter + 1;
        return counter;
    };

    return myFunction;
}

const increment = createCounter();
const c1 = increment();
const c2 = increment();
const c3 = increment();

console.log(c1, c2, c3);

function makeWorker() {
    let name = "Pete";
  
    return function() {
      console.log(name);
    };
  }
  
  let name = "John";
  
  // create a function
  let work = makeWorker();
  
  // call it
  console.log(work());
  console.log(work());

//   Переменная – это свойство специального внутреннего объекта, связанного с текущим выполняющимся блоком/функцией/скриптом.
//   Работа с переменными – это на самом деле работа со свойствами этого объекта.
//   Функция получает текущее значение внешних переменных, то есть их последнее значение

let nameJ = "John";

function sayHi() {
 console.log("Hi, " + nameJ);
}
sayHi();
nameJ = "Pete"; // (*)
sayHi();

// Один вызов – одно лексическое окружение
// Пожалуйста, обратите внимание, что новое лексическое окружение функции создаётся каждый раз, когда функция выполняется.

// И, если функция вызывается несколько раз, то для каждого вызова будет своё лексическое окружение, со своими, специфичными для этого вызова, локальными переменными и параметрами.